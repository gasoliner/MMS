<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.mms.mapper.OutstoreMapper">
  <resultMap id="BaseResultMap" type="cn.mms.po.Outstore">
    <id column="osid" jdbcType="INTEGER" property="osid" />
    <result column="mid" jdbcType="INTEGER" property="mid" />
    <result column="material" jdbcType="VARCHAR" property="material" />
    <result column="count" jdbcType="REAL" property="count" />
    <result column="outway" jdbcType="VARCHAR" property="outway" />
    <result column="liable" jdbcType="VARCHAR" property="liable" />
    <result column="useobject" jdbcType="VARCHAR" property="useobject" />
    <result column="outtime" jdbcType="DATE" property="outtime" />
    <result column="isreturn" jdbcType="INTEGER" property="isreturn" />
    <result column="returntime" jdbcType="DATE" property="returntime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    osid, mid, material, count, outway, liable, useobject, outtime, isreturn, returntime
  </sql>
  <select id="selectByExample" parameterType="cn.mms.po.OutstoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from outstore
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from outstore
    where osid = #{osid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from outstore
    where osid = #{osid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.mms.po.OutstoreExample">
    delete from outstore
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.mms.po.Outstore">
    insert into outstore (osid, mid, material, 
      count, outway, liable, 
      useobject, outtime, isreturn, 
      returntime)
    values (#{osid,jdbcType=INTEGER}, #{mid,jdbcType=INTEGER}, #{material,jdbcType=VARCHAR}, 
      #{count,jdbcType=REAL}, #{outway,jdbcType=VARCHAR}, #{liable,jdbcType=VARCHAR}, 
      #{useobject,jdbcType=VARCHAR}, #{outtime,jdbcType=DATE}, #{isreturn,jdbcType=INTEGER}, 
      #{returntime,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="cn.mms.po.Outstore">
    insert into outstore
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="osid != null">
        osid,
      </if>
      <if test="mid != null">
        mid,
      </if>
      <if test="material != null">
        material,
      </if>
      <if test="count != null">
        count,
      </if>
      <if test="outway != null">
        outway,
      </if>
      <if test="liable != null">
        liable,
      </if>
      <if test="useobject != null">
        useobject,
      </if>
      <if test="outtime != null">
        outtime,
      </if>
      <if test="isreturn != null">
        isreturn,
      </if>
      <if test="returntime != null">
        returntime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="osid != null">
        #{osid,jdbcType=INTEGER},
      </if>
      <if test="mid != null">
        #{mid,jdbcType=INTEGER},
      </if>
      <if test="material != null">
        #{material,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        #{count,jdbcType=REAL},
      </if>
      <if test="outway != null">
        #{outway,jdbcType=VARCHAR},
      </if>
      <if test="liable != null">
        #{liable,jdbcType=VARCHAR},
      </if>
      <if test="useobject != null">
        #{useobject,jdbcType=VARCHAR},
      </if>
      <if test="outtime != null">
        #{outtime,jdbcType=DATE},
      </if>
      <if test="isreturn != null">
        #{isreturn,jdbcType=INTEGER},
      </if>
      <if test="returntime != null">
        #{returntime,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.mms.po.OutstoreExample" resultType="java.lang.Long">
    select count(*) from outstore
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update outstore
    <set>
      <if test="record.osid != null">
        osid = #{record.osid,jdbcType=INTEGER},
      </if>
      <if test="record.mid != null">
        mid = #{record.mid,jdbcType=INTEGER},
      </if>
      <if test="record.material != null">
        material = #{record.material,jdbcType=VARCHAR},
      </if>
      <if test="record.count != null">
        count = #{record.count,jdbcType=REAL},
      </if>
      <if test="record.outway != null">
        outway = #{record.outway,jdbcType=VARCHAR},
      </if>
      <if test="record.liable != null">
        liable = #{record.liable,jdbcType=VARCHAR},
      </if>
      <if test="record.useobject != null">
        useobject = #{record.useobject,jdbcType=VARCHAR},
      </if>
      <if test="record.outtime != null">
        outtime = #{record.outtime,jdbcType=DATE},
      </if>
      <if test="record.isreturn != null">
        isreturn = #{record.isreturn,jdbcType=INTEGER},
      </if>
      <if test="record.returntime != null">
        returntime = #{record.returntime,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update outstore
    set osid = #{record.osid,jdbcType=INTEGER},
      mid = #{record.mid,jdbcType=INTEGER},
      material = #{record.material,jdbcType=VARCHAR},
      count = #{record.count,jdbcType=REAL},
      outway = #{record.outway,jdbcType=VARCHAR},
      liable = #{record.liable,jdbcType=VARCHAR},
      useobject = #{record.useobject,jdbcType=VARCHAR},
      outtime = #{record.outtime,jdbcType=DATE},
      isreturn = #{record.isreturn,jdbcType=INTEGER},
      returntime = #{record.returntime,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.mms.po.Outstore">
    update outstore
    <set>
      <if test="mid != null">
        mid = #{mid,jdbcType=INTEGER},
      </if>
      <if test="material != null">
        material = #{material,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        count = #{count,jdbcType=REAL},
      </if>
      <if test="outway != null">
        outway = #{outway,jdbcType=VARCHAR},
      </if>
      <if test="liable != null">
        liable = #{liable,jdbcType=VARCHAR},
      </if>
      <if test="useobject != null">
        useobject = #{useobject,jdbcType=VARCHAR},
      </if>
      <if test="outtime != null">
        outtime = #{outtime,jdbcType=DATE},
      </if>
      <if test="isreturn != null">
        isreturn = #{isreturn,jdbcType=INTEGER},
      </if>
      <if test="returntime != null">
        returntime = #{returntime,jdbcType=DATE},
      </if>
    </set>
    where osid = #{osid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.mms.po.Outstore">
    update outstore
    set mid = #{mid,jdbcType=INTEGER},
      material = #{material,jdbcType=VARCHAR},
      count = #{count,jdbcType=REAL},
      outway = #{outway,jdbcType=VARCHAR},
      liable = #{liable,jdbcType=VARCHAR},
      useobject = #{useobject,jdbcType=VARCHAR},
      outtime = #{outtime,jdbcType=DATE},
      isreturn = #{isreturn,jdbcType=INTEGER},
      returntime = #{returntime,jdbcType=DATE}
    where osid = #{osid,jdbcType=INTEGER}
  </update>

  <select id="selectAll" parameterType="page" resultType="outstore">
    SELECT * FROM outstore
    LIMIT #{start},#{size}
  </select>

  <select id="selectBorrow" parameterType="page" resultType="voOutstore">
    SELECT * FROM outstore
    WHERE outway = '3' OR outway = '4'
    LIMIT #{start},#{size}
  </select>

</mapper>